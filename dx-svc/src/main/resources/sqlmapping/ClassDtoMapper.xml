<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dianxian.school.dao.ClassDtoMapper">
  <resultMap id="BaseResultMap" type="com.dianxian.school.dto.ClassDto">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="school_id" jdbcType="BIGINT" property="schoolId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="enrol_year" jdbcType="INTEGER" property="enrolYear" />
    <result column="class_number" jdbcType="INTEGER" property="classNumber" />
    <result column="parent_im_group_id" jdbcType="BIGINT" property="parentImGroupId" />
    <result column="student_im_group_id" jdbcType="BIGINT" property="studentImGroupId" />
    <result column="created_by" jdbcType="BIGINT" property="createdBy" />
    <result column="updated_by" jdbcType="BIGINT" property="updatedBy" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, school_id, name, code, enrol_year, class_number, parent_im_group_id, student_im_group_id, 
    created_by, updated_by, created_at, updated_at
  </sql>
  <select id="selectByExample" parameterType="com.dianxian.school.dto.ClassDtoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from class
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from class
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from class
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.dianxian.school.dto.ClassDtoExample">
    delete from class
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.dianxian.school.dto.ClassDto">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into class (school_id, name, code, 
      enrol_year, class_number, parent_im_group_id, 
      student_im_group_id, created_by, updated_by, 
      created_at, updated_at)
    values (#{schoolId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR}, 
      #{enrolYear,jdbcType=INTEGER}, #{classNumber,jdbcType=INTEGER}, #{parentImGroupId,jdbcType=BIGINT}, 
      #{studentImGroupId,jdbcType=BIGINT}, #{createdBy,jdbcType=BIGINT}, #{updatedBy,jdbcType=BIGINT}, 
      #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.dianxian.school.dto.ClassDto">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into class
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="schoolId != null">
        school_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="code != null">
        code,
      </if>
      <if test="enrolYear != null">
        enrol_year,
      </if>
      <if test="classNumber != null">
        class_number,
      </if>
      <if test="parentImGroupId != null">
        parent_im_group_id,
      </if>
      <if test="studentImGroupId != null">
        student_im_group_id,
      </if>
      <if test="createdBy != null">
        created_by,
      </if>
      <if test="updatedBy != null">
        updated_by,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="schoolId != null">
        #{schoolId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="code != null">
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="enrolYear != null">
        #{enrolYear,jdbcType=INTEGER},
      </if>
      <if test="classNumber != null">
        #{classNumber,jdbcType=INTEGER},
      </if>
      <if test="parentImGroupId != null">
        #{parentImGroupId,jdbcType=BIGINT},
      </if>
      <if test="studentImGroupId != null">
        #{studentImGroupId,jdbcType=BIGINT},
      </if>
      <if test="createdBy != null">
        #{createdBy,jdbcType=BIGINT},
      </if>
      <if test="updatedBy != null">
        #{updatedBy,jdbcType=BIGINT},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.dianxian.school.dto.ClassDtoExample" resultType="java.lang.Integer">
    select count(*) from class
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update class
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.schoolId != null">
        school_id = #{record.schoolId,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.code != null">
        code = #{record.code,jdbcType=VARCHAR},
      </if>
      <if test="record.enrolYear != null">
        enrol_year = #{record.enrolYear,jdbcType=INTEGER},
      </if>
      <if test="record.classNumber != null">
        class_number = #{record.classNumber,jdbcType=INTEGER},
      </if>
      <if test="record.parentImGroupId != null">
        parent_im_group_id = #{record.parentImGroupId,jdbcType=BIGINT},
      </if>
      <if test="record.studentImGroupId != null">
        student_im_group_id = #{record.studentImGroupId,jdbcType=BIGINT},
      </if>
      <if test="record.createdBy != null">
        created_by = #{record.createdBy,jdbcType=BIGINT},
      </if>
      <if test="record.updatedBy != null">
        updated_by = #{record.updatedBy,jdbcType=BIGINT},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update class
    set id = #{record.id,jdbcType=BIGINT},
      school_id = #{record.schoolId,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      code = #{record.code,jdbcType=VARCHAR},
      enrol_year = #{record.enrolYear,jdbcType=INTEGER},
      class_number = #{record.classNumber,jdbcType=INTEGER},
      parent_im_group_id = #{record.parentImGroupId,jdbcType=BIGINT},
      student_im_group_id = #{record.studentImGroupId,jdbcType=BIGINT},
      created_by = #{record.createdBy,jdbcType=BIGINT},
      updated_by = #{record.updatedBy,jdbcType=BIGINT},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.dianxian.school.dto.ClassDto">
    update class
    <set>
      <if test="schoolId != null">
        school_id = #{schoolId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="code != null">
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="enrolYear != null">
        enrol_year = #{enrolYear,jdbcType=INTEGER},
      </if>
      <if test="classNumber != null">
        class_number = #{classNumber,jdbcType=INTEGER},
      </if>
      <if test="parentImGroupId != null">
        parent_im_group_id = #{parentImGroupId,jdbcType=BIGINT},
      </if>
      <if test="studentImGroupId != null">
        student_im_group_id = #{studentImGroupId,jdbcType=BIGINT},
      </if>
      <if test="createdBy != null">
        created_by = #{createdBy,jdbcType=BIGINT},
      </if>
      <if test="updatedBy != null">
        updated_by = #{updatedBy,jdbcType=BIGINT},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.dianxian.school.dto.ClassDto">
    update class
    set school_id = #{schoolId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      code = #{code,jdbcType=VARCHAR},
      enrol_year = #{enrolYear,jdbcType=INTEGER},
      class_number = #{classNumber,jdbcType=INTEGER},
      parent_im_group_id = #{parentImGroupId,jdbcType=BIGINT},
      student_im_group_id = #{studentImGroupId,jdbcType=BIGINT},
      created_by = #{createdBy,jdbcType=BIGINT},
      updated_by = #{updatedBy,jdbcType=BIGINT},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

    <!-- Customized SQLs -->
    <select id="getByClassNumber" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from class
        where school_id = #{schoolId} and enrol_year = #{enrolYear} and class_number = #{classNumber}
    </select>

    <select id="countByCode" parameterType="string" resultType="_int">
        select count(*) from class where code = #{code}
    </select>

    <select id="getByCode" parameterType="string" resultMap="BaseResultMap">
        select <include refid="Base_Column_List" /> from class where code = #{code}
    </select>

</mapper>