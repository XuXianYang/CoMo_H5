<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dianxian.school.dao.SchoolDtoMapper" >
  <resultMap id="BaseResultMap" type="com.dianxian.school.dto.SchoolDto" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="code" property="code" jdbcType="VARCHAR" />
    <result column="region_id" property="regionId" jdbcType="INTEGER" />
    <result column="category" property="category" jdbcType="INTEGER" />
    <result column="created_by" property="createdBy" jdbcType="BIGINT" />
    <result column="updated_by" property="updatedBy" jdbcType="BIGINT" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.dianxian.school.dto.SchoolDto" extends="BaseResultMap" >
    <result column="description" property="description" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, name, code, region_id, category, created_by, updated_by, created_at, updated_at
  </sql>
  <sql id="Blob_Column_List" >
    description
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from school
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from school
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.dianxian.school.dto.SchoolDto" useGeneratedKeys="true" keyProperty="id" >
    insert into school (name, code, region_id,
      category, created_by,
      created_at, description
      )
    values (#{name,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR}, #{regionId,jdbcType=INTEGER},
      #{category,jdbcType=INTEGER}, #{createdBy,jdbcType=BIGINT},
      now(), #{description,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.dianxian.school.dto.SchoolDto" >
    insert into school
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="regionId != null" >
        region_id,
      </if>
      <if test="category != null" >
        category,
      </if>
      <if test="createdBy != null" >
        created_by,
      </if>
      <if test="updatedBy != null" >
        updated_by,
      </if>
      <if test="createdAt != null" >
        created_at,
      </if>
      <if test="updatedAt != null" >
        updated_at,
      </if>
      <if test="description != null" >
        description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="regionId != null" >
        #{regionId,jdbcType=INTEGER},
      </if>
      <if test="category != null" >
        #{category,jdbcType=INTEGER},
      </if>
      <if test="createdBy != null" >
        #{createdBy,jdbcType=BIGINT},
      </if>
      <if test="updatedBy != null" >
        #{updatedBy,jdbcType=BIGINT},
      </if>
      <if test="createdAt != null" >
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null" >
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="description != null" >
        #{description,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.dianxian.school.dto.SchoolDto" >
    update school
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="regionId != null" >
        region_id = #{regionId,jdbcType=INTEGER},
      </if>
      <if test="category != null" >
        category = #{category,jdbcType=INTEGER},
      </if>
      <if test="createdBy != null" >
        created_by = #{createdBy,jdbcType=BIGINT},
      </if>
      <if test="updatedBy != null" >
        updated_by = #{updatedBy,jdbcType=BIGINT},
      </if>
      <if test="createdAt != null" >
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null" >
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.dianxian.school.dto.SchoolDto" >
    update school
    set name = #{name,jdbcType=VARCHAR},
      region_id = #{regionId,jdbcType=INTEGER},
      category = #{category,jdbcType=INTEGER},
      created_by = #{createdBy,jdbcType=BIGINT},
      updated_by = #{updatedBy,jdbcType=BIGINT},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      description = #{description,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.dianxian.school.dto.SchoolDto" >
    update school
    set name = #{name,jdbcType=VARCHAR},
      region_id = #{regionId,jdbcType=INTEGER},
      category = #{category,jdbcType=INTEGER},
      created_by = #{createdBy,jdbcType=BIGINT},
      updated_by = #{updatedBy,jdbcType=BIGINT},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="getByName" resultMap="ResultMapWithBLOBs" parameterType="string" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from school
    where name = #{name,jdbcType=BIGINT}
  </select>

  <select id="countByCode" resultType="_int" parameterType="string" >
    select count(*) from school where code = #{code}
  </select>

    <select id="getByCode" resultMap="ResultMapWithBLOBs" parameterType="string" >
        select
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
        from school
        where code = #{code}
    </select>

    <select id="getSchoolList" resultMap="ResultMapWithBLOBs" >
        select
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
        from school
        order by id desc
    </select>

    <select id="getByIds" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from school
        where id in
        <foreach close=")" collection="list" index="index" item="item" open="(" separator=",">
            #{item}
        </foreach>
    </select>
</mapper>