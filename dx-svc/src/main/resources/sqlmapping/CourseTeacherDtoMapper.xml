<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dianxian.school.dao.CourseTeacherDtoMapper" >
  <resultMap id="BaseResultMap" type="com.dianxian.school.dto.CourseTeacherDto" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="course_id" property="courseId" jdbcType="BIGINT" />
    <result column="teacher_id" property="teacherId" jdbcType="BIGINT" />
    <result column="class_id" property="classId" jdbcType="BIGINT" />
    <result column="created_by" property="createdBy" jdbcType="BIGINT" />
    <result column="updated_by" property="updatedBy" jdbcType="BIGINT" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, course_id, teacher_id, class_id, created_by, updated_by, created_at, updated_at
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from course_teacher
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from course_teacher
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.dianxian.school.dto.CourseTeacherDto" >
    insert into course_teacher (id, course_id, teacher_id, 
      class_id, created_by, updated_by, 
      created_at, updated_at)
    values (#{id,jdbcType=BIGINT}, #{courseId,jdbcType=BIGINT}, #{teacherId,jdbcType=BIGINT}, 
      #{classId,jdbcType=BIGINT}, #{createdBy,jdbcType=BIGINT}, #{updatedBy,jdbcType=BIGINT}, 
      #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.dianxian.school.dto.CourseTeacherDto" >
    insert into course_teacher
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="courseId != null" >
        course_id,
      </if>
      <if test="teacherId != null" >
        teacher_id,
      </if>
      <if test="classId != null" >
        class_id,
      </if>
      <if test="createdBy != null" >
        created_by,
      </if>
      <if test="updatedBy != null" >
        updated_by,
      </if>
      <if test="createdAt != null" >
        created_at,
      </if>
      <if test="updatedAt != null" >
        updated_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="courseId != null" >
        #{courseId,jdbcType=BIGINT},
      </if>
      <if test="teacherId != null" >
        #{teacherId,jdbcType=BIGINT},
      </if>
      <if test="classId != null" >
        #{classId,jdbcType=BIGINT},
      </if>
      <if test="createdBy != null" >
        #{createdBy,jdbcType=BIGINT},
      </if>
      <if test="updatedBy != null" >
        #{updatedBy,jdbcType=BIGINT},
      </if>
      <if test="createdAt != null" >
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null" >
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.dianxian.school.dto.CourseTeacherDto" >
    update course_teacher
    <set >
      <if test="courseId != null" >
        course_id = #{courseId,jdbcType=BIGINT},
      </if>
      <if test="teacherId != null" >
        teacher_id = #{teacherId,jdbcType=BIGINT},
      </if>
      <if test="classId != null" >
        class_id = #{classId,jdbcType=BIGINT},
      </if>
      <if test="createdBy != null" >
        created_by = #{createdBy,jdbcType=BIGINT},
      </if>
      <if test="updatedBy != null" >
        updated_by = #{updatedBy,jdbcType=BIGINT},
      </if>
      <if test="createdAt != null" >
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null" >
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.dianxian.school.dto.CourseTeacherDto" >
    update course_teacher
    set course_id = #{courseId,jdbcType=BIGINT},
      teacher_id = #{teacherId,jdbcType=BIGINT},
      class_id = #{classId,jdbcType=BIGINT},
      created_by = #{createdBy,jdbcType=BIGINT},
      updated_by = #{updatedBy,jdbcType=BIGINT},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

    <insert id="batchInsert" parameterType="com.dianxian.school.dto.CourseTeacherDto" >
        insert into course_teacher (course_id, teacher_id, class_id, created_by, created_at)
        values
        <foreach collection="list" item="item" index="index" separator="," >
            ( #{item.courseId,jdbcType=BIGINT}, #{item.teacherId,jdbcType=BIGINT},
            #{item.classId,jdbcType=BIGINT}, #{item.createdBy,jdbcType=BIGINT}, now())
        </foreach>
    </insert>

    <select id="countAssignedCoursesByClass" resultType="_int" >
        select count(*) from course_teacher where class_id = #{classId} and course_id in
        <foreach item="item" index="index" collection="courseIds" open="(" separator="," close=")">
        #{item}
        </foreach>
    </select>
    <select id="getAssignedCourses" resultMap="BaseResultMap" >
        select
        <include refid="Base_Column_List" />
        from course_teacher
        where teacher_id = #{teacherId,jdbcType=BIGINT} and class_id = #{classId}
    </select>
    <select id="getAssignedCoursesOfClass" resultMap="BaseResultMap" >
        select
        <include refid="Base_Column_List" />
        from course_teacher
        where class_id = #{classId}
    </select>
    <select id="getTeacherAssignedCourseInClass" resultMap="BaseResultMap" >
        select
        <include refid="Base_Column_List" />
        from course_teacher
        where teacher_id = #{teacherId} and class_id = #{classId} and course_id = #{courseId}
    </select>

    <select id="getJoinedClasses" resultType="java.lang.Long" >
        select
        DISTINCT class_id
        from course_teacher
        where teacher_id = #{teacherId}
    </select>

    <select id="getAssignedCourseOfClassByCourse" resultMap="BaseResultMap" >
        select
        <include refid="Base_Column_List" />
        from course_teacher
        where class_id = #{classId} and course_id = #{courseId}
    </select>

    <select id="getAssignedCoursesOfTeacher" resultMap="BaseResultMap" >
        select
        <include refid="Base_Column_List" />
        from course_teacher
        where teacher_id = #{teacherId,jdbcType=BIGINT} order by id desc
    </select>
</mapper>